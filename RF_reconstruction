# -*- coding = utf-8 -*-
# @Time : 2023/9/17 13:57
# @Author : gao
# @File : RF_reconstruction.py

import os
import time
import pandas as pd
import numpy as np
import pydotplus
from sklearn.tree import export_graphviz
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import cross_val_score, KFold, train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import datasets

train_dir = r"G:\Desktop\data processing\research data\input data\train_nona"
output_dir = r"G:\Desktop\data processing\research data\input data\results\RF\result_RF"

for file_name in os.listdir(train_dir):
    if file_name.endswith(".csv"):
        start_time = time.time() 

        train_data = pd.read_csv(os.path.join(train_dir, file_name))

        X = train_data[['pre', 'temp', 'wind', 'pet', 'SMsurf', 'SMroot']]

        train_data_nona = train_data.dropna(axis=0, how='any')

        X_train = train_data_nona[['pre', 'temp', 'wind', 'pet', 'SMsurf', 'SMroot']]
        y_train = train_data_nona['runoff']

        scaler = MinMaxScaler()
        X_train_norm = scaler.fit_transform(X_train)
        X_norm = scaler.transform(X)

        rf_reg = RandomForestRegressor(n_estimators=500, random_state=42, n_jobs=-1)

        rf_reg.fit(X_train_norm, y_train)

        y_pred = rf_reg.predict(X_norm)

        end_time = time.time() 
        run_time = end_time - start_time  
        print(f"time：{run_time}秒")

        result_file = os.path.join(output_dir, f"{os.path.splitext(file_name)[0]}_result_re_RF.csv")
        pred = pd.DataFrame({'y_pred': y_pred})
        pred.to_csv(result_file, index=False)
